%input#proposal_attributes{:type => "hidden", :name => "proposal_attributes", :value => @proposal.raw_data['attributes'][@proposal.barclamp].to_json}

%h3.page-header
  = t('.attributes')
  = link_to "Raw", proposal_barclamp_path(:id => @proposal.name, :controller => @proposal.barclamp, :dep_raw => @dep_raw, :attr_raw => true), :class => "pull-right"
.page-header-bottom

%div
  = render 'barclamp/git/pfsdeps.html.haml'
  = render_instance_selector("database", :database_instance, t('.database_instance'), "database_instance", @proposal)
  = render_instance_selector("keystone", :keystone_instance, t('.keystone_instance'), "keystone_instance", @proposal)
  = render_instance_selector("rabbitmq", :rabbitmq_instance, t('.rabbitmq_instance'), "rabbitmq_instance", @proposal)
  %p
    %label{ :for => :networking_plugin }= t('.networking_plugin')
    = select_tag :networking_plugin, options_for_select([['linuxbridge', 'linuxbridge'], ['openvswitch','openvswitch']], @proposal.raw_data['attributes'][@proposal.barclamp]['networking_plugin']), :onchange => "update_value('networking_plugin', 'networking_plugin', 'string'); onPluginChange();"
  %div{ :id => 'networking_mode_div' }
    %p
      %label{ :for => :networking_mode }= t('.networking_mode')
      = select_tag :networking_mode, options_for_select([['flat', 'local'], ['gre','gre']], @proposal.raw_data['attributes'][@proposal.barclamp]["networking_mode"]), :onchange => "update_value('networking_mode', 'networking_mode', 'string')"
  %p
    %label{ :for => :dhcp_domain }= t('.dhcp_domain')
    %input#dhcp_domain{:type => "text", :name => "dhcp_domain", :'data-default' => @proposal.raw_data['attributes'][@proposal.barclamp]["dhcp_domain"], :onchange => "update_value('dhcp_domain','dhcp_domain', 'string')"}

    %div{ :id => :protocol_div }
      %p
        %label{ :for => :protocol }= t('.protocol')
        = select_tag :protocol, options_for_select([['HTTP','http'], ['HTTPS', 'https']], @proposal.raw_data['attributes'][@proposal.barclamp]["api"]["protocol"].to_s), :onchange => "update_value('api/protocol', 'protocol', 'string')"

    %div{ :id => :ssl_div }
      %p
        %label{ :for => :ssl_certfile }= t('.ssl_certfile')
        = text_field_tag :ssl_certfile, @proposal.raw_data['attributes'][@proposal.barclamp]["ssl"]["certfile"], :size => 80, :onchange => "update_value('ssl/certfile', 'ssl_certfile', 'string')"
      %p
        %label{ :for => :ssl_keyfile }= t('.ssl_keyfile')
        = text_field_tag :ssl_keyfile, @proposal.raw_data['attributes'][@proposal.barclamp]["ssl"]["keyfile"], :size => 80, :onchange => "update_value('ssl/keyfile', 'ssl_keyfile', 'string')"
      %p
        %label{ :for => :ssl_generate_certs }= t('.ssl_generate_certs')
        = select_tag :ssl_generate_certs, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["ssl"]["generate_certs"].to_s), :onchange => "update_value('ssl/generate_certs', 'ssl_generate_certs', 'boolean')"
      %p
        %label{ :for => :ssl_insecure }= t('.ssl_insecure')
        = select_tag :ssl_insecure, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["ssl"]["insecure"].to_s), :onchange => "update_value('ssl/insecure', 'ssl_insecure', 'boolean')"
      %p
        %label{ :for => :ssl_cert_required }= t('.ssl_cert_required')
        = select_tag :ssl_cert_required, options_for_select([['true','true'], ['false', 'false']], @proposal.raw_data['attributes'][@proposal.barclamp]["ssl"]["cert_required"].to_s), :onchange => "update_value('ssl/cert_required', 'ssl_cert_required', 'boolean')"
      %p
        %label{ :for => :ssl_ca_certs }= t('.ssl_ca_certs')
        = text_field_tag :ssl_ca_certs, @proposal.raw_data['attributes'][@proposal.barclamp]["ssl"]["ca_certs"], :size => 80, :onchange => "update_value('ssl/ca_certs', 'ssl_ca_certs', 'string')"

:javascript
  function setSelectedValue(selectObj, valueToSet) {
    for (var i = 0; i < selectObj.options.length; i++) {
      if (selectObj.options[i].text == valueToSet) {
        selectObj.options[i].selected = true;
        return;
      }
    }
  }

  function onPluginChange() {
    networkingPlugin = $('select#networking_plugin').val();
    if(networkingPlugin == "linuxbridge") {
      $('div#networking_mode_div').hide();
      update_value_direct('networking_mode', 'vlan', 'string');
    } else if (networkingPlugin == "openvswitch") {
      $('div#networking_mode_div').show();
      update_value('networking_mode', 'networking_mode', 'string');
    }
  }

  function toggle_protocol() {
    if ($('#protocol option:selected').attr('value') == 'https') {
      $('#ssl_div').show();
    } else {
      $('#ssl_div').hide();
    }
  };

  function toggle_ssl_cert_required() {
    if ($('#ssl_cert_required option:selected').attr('value') == 'true') {
      $('#ssl_ca_certs').removeAttr('disabled');
    } else {
      $('#ssl_ca_certs').attr('disabled', 'disabled');
    }
  };

  function toggle_ssl_generate_certs() {
    if ($('#ssl_generate_certs option:selected').attr('value') == 'true') {
      $('#ssl_insecure').attr('value', 'true');
      $('#ssl_cert_required').attr('value', 'false');
    }
  };

  $(document).ready(function(){
    onPluginChange();
    toggle_protocol();
    toggle_ssl_cert_required();
    toggle_ssl_generate_certs();
  });

  $('#protocol').change(toggle_protocol);
  $('#ssl_cert_required').change(toggle_ssl_cert_required);
  $('#ssl_generate_certs').change(toggle_ssl_generate_certs);
